#![cfg_attr(not(doc), no_main)]
#![feature(stmt_expr_attributes)]
#![feature(try_trait_v2)]
#![allow(dead_code)]
#[allow(unused_imports)]

use std::cell::Cell;
use std::rc::Rc;
use web_sys::ImageData;
use js_sys::Uint8Array;
use wasm_bindgen::{prelude::*, JsCast, Clamped};
use wasm_bindgen_futures::JsFuture;

#[wasm_bindgen]
pub fn init_panic_hook() {
    console_error_panic_hook::set_once();
}

#[wasm_bindgen]
pub async fn fetch_url_binary(url: String) -> Result<Uint8Array, JsValue> {
    let window = web_sys::window().unwrap(); // Browser window
    let promise = JsFuture::from(window.fetch_with_str(&url)); // File fetch promise
    let result = promise.await?; // Await fulfillment of fetch
    let response: web_sys::Response = result.dyn_into().unwrap(); // Type casting
    let image_data = JsFuture::from(response.array_buffer()?).await?; // Get text
    Ok(Uint8Array::new(&image_data))
}


#[wasm_bindgen(start)]
pub async fn start() -> Result<(), JsValue> {

    let document = web_sys::window().unwrap().document().unwrap();
    let canvas = document
        .create_element("canvas")?
        .dyn_into::<web_sys::HtmlCanvasElement>()?;
    document.body().unwrap().append_child(&canvas)?;
    canvas.set_width(640);
    canvas.set_height(480);
    canvas.style().set_property("border", "solid")?;
    let context = canvas
        .get_context("2d")?
        .unwrap()
        .dyn_into::<web_sys::CanvasRenderingContext2d>()?;

    // context.put_image_data(&image_data_temp, 0.0, 0.0)?;

    let context = Rc::new(context);
    {
        let context = context.clone();
        let closure = Closure::wrap(Box::new(move |event: web_sys::MouseEvent| {

            let mut t = Tile::new("data/terrain/iceberg.png");
            if t.was_clicked(event.offset_x() as f64, event.offset_y() as f64) {
                t.clicked(event.offset_x() as f64, event.offset_y() as f64);
            }
            t.render(&context);

        }) as Box<dyn FnMut(_)>);
        canvas.add_event_listener_with_callback("mouseup", closure.as_ref().unchecked_ref())?;
        closure.forget();
    }

    Ok(())
}

use web_sys::CanvasRenderingContext2d;

trait Renderable {
    fn render(&self, _context: &Rc<CanvasRenderingContext2d>) {
    }
}

trait Clickable {
    fn was_clicked(&self, _x: f64, _y: f64) -> bool {
        false
    }
    fn clicked(&mut self, _x: f64, _y: f64) {
    }
}

pub struct Tile {
    url: String,
    x: f64,
    y: f64
}

impl Clickable for Tile {
    fn was_clicked(&self, _x: f64, _y: f64) -> bool {
        true
    }
    fn clicked(&mut self, x: f64, y: f64) {
        self.x = x;
        self.y = y;
    }
}

impl Renderable for Tile {
    fn render(&self, context: &Rc<CanvasRenderingContext2d>) {
        let raw_data = [137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,64,0,0,0,64,8,6,0,0,0,170,105,113,222,0,0,0,9,112,72,89,115,0,0,0,0,0,0,0,1,0,132,121,23,115,0,0,16,0,73,68,65,84,120,156,221,155,219,115,85,229,25,198,249,3,58,157,233,69,47,123,213,233,77,103,58,157,233,133,157,233,104,59,163,86,107,61,205,40,88,28,164,29,149,162,70,211,14,8,105,17,132,114,136,149,2,85,3,2,2,1,57,165,202,65,17,16,36,41,40,57,33,228,80,205,1,37,7,164,59,1,13,1,10,254,3,95,215,239,93,251,249,242,238,149,205,81,146,204,120,241,242,173,195,222,59,235,121,222,243,187,62,198,133,16,198,141,149,188,95,243,85,64,198,242,25,198,12,248,138,245,167,194,139,203,122,77,56,30,43,34,70,245,143,213,212,93,48,176,211,231,117,134,201,207,181,134,251,38,181,152,112,204,181,181,85,125,129,207,124,235,8,200,2,191,253,225,70,147,95,61,80,31,238,24,159,158,27,17,165,237,163,78,196,136,3,7,12,102,62,117,118,103,120,248,143,29,81,235,0,151,232,156,149,207,60,57,243,248,168,17,49,34,63,218,216,250,117,216,178,61,103,192,75,231,119,153,102,1,247,224,148,148,4,86,129,191,119,114,135,137,200,185,107,98,139,89,196,248,169,255,49,34,248,141,145,36,226,166,3,223,176,227,108,88,186,182,47,60,191,164,63,76,153,115,50,76,42,237,10,19,74,58,13,36,192,57,6,172,64,115,238,69,36,233,30,228,61,51,167,107,196,136,184,233,166,14,104,9,32,0,48,249,249,158,240,72,105,183,9,231,0,131,24,29,235,58,90,71,178,164,240,217,73,211,142,143,136,107,220,52,224,60,156,204,91,90,198,164,121,112,79,10,2,33,37,115,83,23,225,88,215,30,124,188,37,106,157,223,49,224,121,129,36,89,134,92,3,55,195,234,70,157,0,229,113,139,234,121,255,198,159,137,234,28,139,128,201,211,90,66,105,121,191,129,147,0,22,23,89,178,234,84,88,186,166,219,142,33,195,220,37,33,75,159,3,48,215,248,62,199,102,49,201,117,17,194,189,69,111,156,9,175,109,29,12,155,118,13,222,48,17,55,4,188,244,133,246,240,187,167,235,205,92,61,120,165,53,5,55,211,38,128,18,146,102,204,203,25,232,138,202,238,176,118,115,119,120,125,115,95,122,156,88,16,194,49,68,136,36,254,198,220,138,51,5,4,122,11,210,241,179,127,251,196,226,13,159,37,254,92,175,107,92,51,112,30,144,135,194,252,0,254,243,59,63,8,119,143,175,49,160,34,224,182,251,142,154,136,8,204,120,122,121,206,0,99,174,172,146,213,149,92,235,181,99,126,123,117,94,182,239,233,51,33,123,0,10,112,8,68,72,178,238,164,99,62,183,112,101,255,117,89,196,117,155,58,34,109,171,128,241,22,0,1,202,233,155,170,78,68,1,104,229,230,14,91,55,87,117,154,112,157,149,235,172,16,178,125,71,135,173,123,107,250,195,156,5,23,204,204,23,173,61,111,100,188,248,250,160,213,19,83,202,122,134,145,161,115,172,136,117,233,214,115,97,123,205,165,171,18,113,85,83,79,75,214,198,88,189,73,60,112,85,115,28,207,91,116,218,128,109,123,167,39,2,221,178,165,217,128,33,92,127,239,221,182,176,231,253,174,176,115,119,74,134,174,235,51,8,247,15,214,158,14,245,71,206,154,235,0,74,150,128,50,176,144,120,158,88,129,183,20,136,130,52,226,195,213,136,40,26,213,189,198,5,204,3,247,213,156,238,149,47,254,42,212,212,116,219,131,3,160,122,95,187,173,111,87,53,25,72,64,115,237,192,190,174,80,125,48,103,171,105,59,79,206,222,61,169,232,88,191,5,9,117,13,185,80,127,108,32,52,181,14,70,160,89,1,180,214,229,111,95,48,2,116,143,64,11,17,239,125,244,245,48,34,236,31,21,48,152,25,69,7,81,214,87,107,8,62,207,53,127,93,102,95,95,219,29,14,86,167,15,109,218,123,231,152,1,150,112,14,120,238,3,166,246,80,151,125,71,160,17,174,113,95,231,128,103,213,239,234,59,88,4,1,21,64,210,244,172,165,125,118,60,115,217,128,29,115,77,247,189,112,29,156,158,8,211,58,17,89,254,164,20,68,26,99,85,49,66,224,83,30,70,251,104,156,192,198,195,233,193,1,186,115,71,179,9,128,17,105,30,57,214,216,149,106,51,1,194,49,107,237,193,142,8,174,225,112,167,1,70,248,188,142,17,3,95,219,29,73,68,150,85,164,192,8,180,30,232,188,213,169,53,0,88,241,67,214,33,34,150,175,233,72,9,0,4,172,41,199,250,60,172,130,196,2,77,18,120,32,2,224,152,176,64,31,120,191,217,86,51,249,173,117,81,219,8,224,0,10,64,214,182,214,92,104,110,206,133,163,117,157,118,206,202,103,0,206,185,72,225,51,90,59,219,250,108,69,32,194,91,205,254,234,52,88,34,222,255,117,12,46,226,128,191,23,173,230,229,143,194,148,63,45,15,227,48,9,2,10,64,125,193,98,149,89,254,154,10,27,130,214,123,251,115,102,158,50,81,243,235,132,4,30,142,85,192,63,254,176,61,124,114,228,243,208,214,220,147,74,2,30,105,57,214,107,215,5,216,44,32,79,20,132,116,117,246,135,222,158,193,112,58,119,206,142,143,124,252,69,216,187,187,41,90,151,86,98,135,226,135,5,208,36,117,98,9,2,139,59,112,76,86,176,66,171,172,39,166,74,44,226,15,211,247,133,251,39,206,79,9,224,98,182,216,144,240,163,4,17,44,133,244,36,240,88,64,212,244,161,33,48,166,233,60,96,180,7,136,255,246,158,9,93,199,7,34,56,238,115,15,50,16,145,193,49,159,5,60,194,231,176,170,157,219,234,135,4,23,75,86,17,80,185,177,41,166,90,171,53,146,32,142,230,83,151,206,197,230,74,110,173,38,236,174,71,118,132,91,239,158,151,18,0,35,133,69,69,90,154,46,90,158,118,96,42,98,32,0,159,38,130,3,26,192,242,79,180,199,3,3,18,201,157,60,107,50,112,230,130,9,192,122,78,156,54,96,28,35,220,231,154,172,68,247,17,136,226,119,33,96,235,198,127,135,221,219,27,194,158,93,141,118,110,164,36,68,108,220,112,52,172,171,108,138,245,197,146,21,29,97,201,202,110,123,238,23,23,119,68,18,124,92,131,128,135,166,158,8,191,184,167,42,252,236,214,57,41,1,84,79,5,22,80,150,198,131,217,229,109,86,175,175,218,212,107,224,149,179,45,61,85,167,193,139,21,31,70,32,193,204,62,209,62,0,1,62,56,144,138,136,40,38,128,133,12,128,159,31,188,100,199,252,222,230,245,213,6,30,1,52,36,136,0,210,43,22,240,70,229,225,80,177,178,37,172,88,215,100,4,0,28,153,62,251,152,89,47,89,205,215,8,82,112,1,1,88,128,218,78,21,22,68,250,146,153,77,97,225,178,142,80,249,118,95,44,91,125,206,150,246,69,128,124,31,11,16,184,139,231,47,25,40,145,192,10,80,17,195,61,221,151,223,227,14,2,187,235,95,169,5,176,34,196,128,205,155,26,76,251,144,128,5,44,175,168,55,18,254,190,228,136,129,47,91,152,148,236,211,234,99,28,131,4,101,2,48,178,142,127,106,111,161,11,88,192,163,194,202,179,132,169,240,67,248,127,74,64,206,130,141,10,29,229,102,252,54,75,0,230,44,2,0,6,9,34,2,225,248,210,165,84,116,15,243,63,92,211,106,192,9,166,90,117,12,112,5,67,68,86,0,1,128,255,231,202,70,35,96,246,226,86,83,220,228,146,15,141,0,204,94,90,199,34,116,92,16,3,168,183,185,97,169,207,185,130,98,0,4,32,34,0,81,180,151,11,28,170,110,142,17,29,2,188,198,5,242,236,153,139,195,72,224,152,207,241,61,15,156,64,135,230,69,2,34,18,176,62,197,128,213,171,26,12,248,172,185,117,38,152,190,105,63,33,64,67,24,72,208,76,65,193,61,186,192,186,93,255,179,170,41,91,8,17,7,32,128,34,73,22,64,170,161,6,80,169,170,34,69,224,209,160,180,47,2,164,121,29,123,237,139,0,76,159,223,64,248,13,126,11,34,68,6,160,185,39,34,0,143,246,241,127,204,31,2,22,46,254,160,128,0,58,85,172,90,51,71,141,228,148,17,34,1,52,10,170,157,33,2,119,208,184,138,169,11,36,208,174,170,224,240,85,159,226,0,15,199,67,242,240,242,111,175,233,44,1,89,34,8,152,2,39,2,8,168,18,111,93,8,214,199,223,38,8,190,250,74,99,4,143,96,254,79,150,54,26,1,126,54,225,103,141,224,139,4,160,89,128,251,178,145,160,129,53,148,87,116,26,1,148,141,124,14,2,84,5,146,10,125,169,170,66,232,68,251,201,2,205,75,138,93,243,1,208,106,133,36,0,242,125,197,21,85,137,158,20,17,64,58,206,18,48,109,102,109,40,157,209,24,30,125,234,80,1,1,126,228,174,84,24,9,216,184,247,98,65,99,17,39,48,137,5,72,251,164,65,170,64,8,136,221,89,190,1,242,154,129,0,30,18,43,0,172,64,123,223,207,90,70,214,37,148,29,68,8,5,147,130,44,196,136,0,4,55,32,14,40,3,136,0,100,194,19,7,227,176,134,85,227,58,100,24,1,4,65,52,47,23,64,251,152,12,41,16,240,136,192,55,30,237,143,205,12,96,85,205,73,59,104,75,53,128,55,123,129,45,22,7,188,248,207,136,44,8,85,193,164,70,73,29,227,91,85,159,88,38,224,89,33,193,242,127,62,14,168,132,87,3,7,9,88,134,189,127,72,178,64,140,1,52,12,104,158,130,72,115,56,190,172,20,8,1,4,64,8,16,9,128,134,8,86,30,76,254,10,1,172,144,224,51,192,229,128,103,175,115,156,173,15,16,254,134,186,69,17,128,27,144,146,169,4,113,83,72,160,24,130,128,39,158,221,27,71,243,4,61,20,74,71,203,236,2,171,136,22,64,111,140,230,41,14,24,55,49,243,35,3,176,2,28,2,214,191,245,133,21,66,184,129,90,81,72,160,67,19,1,106,114,148,9,120,248,44,208,43,105,61,235,2,202,34,252,14,113,193,215,26,34,128,108,0,1,84,168,16,96,165,112,34,84,176,88,0,249,94,233,15,151,134,12,197,3,8,136,117,128,189,208,40,75,139,6,204,196,58,167,68,168,171,73,131,154,231,241,135,104,65,21,3,32,128,38,199,91,128,210,96,22,100,49,127,191,28,17,34,64,25,69,101,182,234,14,68,67,23,111,1,20,67,128,71,74,102,213,69,2,212,19,168,17,226,156,110,112,252,227,175,133,113,152,57,179,191,194,217,126,163,189,164,224,58,102,69,54,88,190,170,205,8,160,24,34,11,136,0,53,48,104,9,240,122,232,108,229,151,53,243,203,249,123,214,244,249,61,192,251,122,195,138,161,68,170,182,29,79,59,66,8,72,158,15,237,171,17,122,110,86,75,236,102,9,240,16,192,8,29,107,167,246,129,44,155,7,88,35,148,159,255,233,205,142,70,93,228,84,49,10,17,16,160,74,144,32,8,1,234,221,189,233,102,9,80,97,228,163,191,7,233,207,125,224,67,248,46,217,0,215,2,180,153,127,178,250,153,0,141,16,22,96,110,144,88,45,4,80,18,251,1,9,177,205,138,185,36,230,49,54,255,235,130,234,212,2,68,128,138,5,165,14,198,219,16,48,231,165,207,13,124,90,11,244,198,89,0,110,224,9,208,195,74,163,30,156,239,11,124,99,132,232,123,106,159,117,142,101,33,106,175,177,46,155,35,230,251,1,21,66,164,65,102,2,107,42,219,98,12,192,98,103,44,104,46,120,159,64,166,243,233,30,23,176,24,32,2,252,171,106,5,10,185,0,194,75,11,223,14,171,17,242,4,120,13,122,224,94,164,93,157,11,180,39,64,115,2,128,139,8,174,83,19,248,233,144,90,98,53,68,214,12,37,214,74,22,152,84,82,87,48,216,17,25,154,26,69,2,136,1,127,126,249,203,248,106,218,147,0,1,178,0,152,133,101,72,80,12,208,212,199,147,112,37,240,34,201,95,83,205,0,104,63,36,209,36,73,191,171,235,196,0,139,254,73,55,168,121,0,192,13,252,194,38,243,125,74,97,10,33,63,4,65,201,10,244,20,122,177,14,176,82,56,33,129,32,161,134,72,100,208,14,203,255,33,0,166,109,230,127,48,23,93,64,89,64,90,242,230,174,32,150,53,119,175,125,77,131,84,254,106,170,36,50,84,4,113,12,209,220,211,72,221,119,131,170,4,17,92,151,114,88,202,188,115,194,167,195,54,99,20,52,67,248,71,54,96,176,90,10,76,218,97,192,19,101,177,0,42,47,44,192,7,65,61,88,54,24,102,181,44,48,242,105,2,155,154,32,149,210,92,83,63,33,173,107,213,223,194,234,44,255,111,106,40,32,96,214,188,230,180,10,204,91,0,74,212,206,148,108,83,84,72,64,190,7,208,236,92,4,80,8,217,219,219,164,14,0,188,189,179,219,211,17,83,160,15,130,172,94,243,197,136,0,24,169,76,13,142,26,40,47,220,87,137,173,97,169,4,210,248,155,28,83,3,104,32,66,67,36,23,128,4,220,128,121,128,102,28,106,243,41,244,52,29,98,34,116,255,248,25,41,1,4,194,236,219,87,70,229,88,0,82,181,187,223,82,8,121,23,230,41,134,244,162,66,154,151,134,149,1,124,19,36,109,66,128,180,173,33,10,68,168,219,203,222,83,222,23,49,42,132,52,21,34,6,16,147,72,131,4,65,92,53,90,65,190,18,212,123,67,38,197,224,196,221,89,227,88,28,2,184,233,95,52,242,69,185,128,8,160,12,54,217,213,97,130,27,248,44,0,88,31,4,57,7,56,171,142,33,1,237,201,2,68,128,95,5,88,66,212,247,231,212,1,4,65,149,194,122,187,140,133,210,185,66,2,177,139,52,168,10,208,15,67,117,205,44,64,4,104,30,160,24,160,217,0,249,212,170,192,124,13,96,45,113,254,141,140,70,97,26,138,226,163,197,218,94,145,225,115,60,199,106,115,61,112,137,170,62,198,224,16,160,145,120,28,137,229,199,98,234,8,121,46,42,84,158,145,41,54,207,60,247,213,35,5,86,173,49,159,48,70,11,160,42,242,47,18,185,169,215,202,184,193,239,75,119,134,167,203,14,88,233,136,11,168,16,210,60,192,191,23,0,148,79,139,114,11,155,246,38,217,194,231,121,206,1,43,240,190,169,18,17,154,52,9,184,149,193,154,66,29,78,159,129,149,86,29,18,54,188,213,110,69,17,85,158,47,122,210,29,107,185,24,231,120,107,20,123,1,230,1,139,43,7,226,72,204,79,134,196,158,54,58,61,255,194,214,176,254,205,67,246,16,116,131,190,35,244,162,158,32,43,128,246,239,0,32,75,45,181,136,35,78,48,89,86,205,143,246,33,66,195,23,145,206,119,120,109,6,1,12,80,153,10,1,28,161,195,5,23,202,213,10,54,225,227,229,41,74,181,94,160,226,205,207,226,46,47,130,3,31,176,53,63,36,225,152,38,2,107,128,140,223,62,180,38,204,157,191,222,38,182,60,128,105,253,196,249,130,52,37,241,224,139,221,251,226,212,249,97,215,219,59,207,89,156,240,128,21,24,165,121,13,100,1,94,254,143,29,97,106,233,146,184,89,10,240,184,181,86,132,55,224,156,139,16,2,58,68,89,22,128,5,76,129,188,200,174,46,192,106,30,64,37,24,119,102,36,4,216,172,48,255,146,241,215,247,60,19,22,188,180,206,180,100,26,60,145,130,209,122,37,240,0,47,6,94,57,30,18,164,93,137,220,14,235,35,255,163,132,135,31,157,29,75,91,5,114,117,123,26,244,114,12,120,17,162,78,16,255,255,225,143,239,75,119,73,124,239,251,63,178,147,59,30,170,176,18,145,78,144,13,17,136,230,104,76,82,104,145,253,14,17,109,89,251,203,11,107,204,53,120,72,171,15,62,61,103,32,32,3,225,216,159,251,235,250,172,132,115,126,195,107,122,255,7,159,89,250,93,187,254,195,20,248,164,13,225,167,183,188,18,35,187,159,246,162,40,153,186,53,65,201,170,108,166,22,248,39,183,60,22,190,243,221,31,132,97,91,100,32,130,155,84,72,88,4,162,17,146,8,240,85,149,182,192,34,183,221,190,204,136,224,33,9,148,128,208,214,22,155,35,38,171,64,179,10,40,219,94,60,1,156,243,61,192,147,109,72,185,212,251,252,54,38,171,198,70,91,113,177,200,130,125,136,201,185,70,123,88,51,238,173,148,7,54,48,94,117,147,20,236,96,17,116,75,144,160,17,51,4,104,96,170,61,128,42,47,101,21,184,6,193,146,104,172,73,178,6,170,144,32,49,2,156,232,26,4,224,179,144,200,111,16,220,48,117,109,129,201,166,54,255,74,95,57,30,193,133,21,233,139,1,191,166,109,114,89,215,96,168,136,137,193,44,199,145,249,231,90,45,83,104,131,179,86,136,160,74,35,125,66,194,187,7,190,140,251,0,17,174,177,35,77,36,65,2,171,128,51,216,252,229,111,54,196,13,15,144,144,173,88,135,72,72,211,28,229,46,26,231,153,175,4,252,186,54,74,202,53,248,81,88,229,143,232,69,170,73,66,10,45,117,220,188,152,220,83,13,254,192,196,109,22,113,241,63,13,89,181,59,148,173,120,172,92,167,225,130,44,77,106,48,101,237,2,245,59,193,84,171,16,244,32,69,127,147,103,186,22,141,223,16,1,197,136,128,101,109,85,45,232,33,202,253,187,248,161,50,244,222,137,107,44,247,210,180,48,182,146,80,185,81,190,114,143,224,70,32,163,125,85,27,107,187,205,243,189,188,127,207,175,204,196,223,167,241,185,156,143,223,84,2,138,17,129,107,144,62,227,244,37,191,139,211,124,177,108,104,39,120,186,193,57,103,238,2,88,63,189,125,108,202,225,56,190,70,252,11,77,189,213,97,68,167,86,150,223,192,5,137,79,215,106,234,55,149,128,203,17,193,6,234,161,61,6,67,239,226,11,247,29,165,231,124,22,34,32,39,187,149,69,251,17,53,164,213,64,67,233,89,51,125,226,147,210,217,72,27,98,142,0,0,0,171,73,68,65,84,141,202,55,34,64,162,172,65,250,140,22,81,214,19,35,178,230,243,250,31,36,34,131,194,170,112,207,111,46,67,94,218,207,171,14,209,24,235,155,104,124,68,8,200,18,161,24,161,183,76,114,5,173,197,186,52,253,39,10,93,87,158,191,222,168,62,166,4,20,115,13,30,30,159,141,100,228,45,194,155,125,36,66,187,192,181,45,127,4,129,143,40,1,89,34,136,208,230,26,9,17,113,59,94,12,150,39,135,170,186,81,208,248,168,18,80,140,8,89,132,210,167,254,119,8,215,200,227,163,5,124,84,9,200,18,65,177,2,88,128,83,171,143,5,240,49,33,96,152,69,36,205,205,245,86,110,223,10,2,36,100,12,100,44,159,225,255,198,100,87,50,171,134,245,194,0,0,0,0,73,69,78,68,174,66,96,130];
        let binary = js_sys::Uint8Array::new(&raw_data.iter().map(|x| JsValue::from_f64(*x as f64)).collect::<js_sys::Array>());

        let altbuf = binary.to_vec();

        // Convert the png encoded bytes to an rgba pixel buffer (given the PNG is actually in
        // 8byte RGBA format).
        let image = image::load_from_memory_with_format(&altbuf, image::ImageFormat::Png).unwrap();
        let rgba_image = image.to_rgba8();

        let clamped_buf: Clamped<&[u8]> = Clamped(&rgba_image.as_raw());
        let image_data_temp = ImageData::new_with_u8_clamped_array_and_sh(clamped_buf, image.width(), image.height()).unwrap();

        context.put_image_data(&image_data_temp, self.x, self.y);
    }
}
impl Tile {
    pub fn show_url(&self) -> &str {
        &self.url
    }
    pub fn new(url: &str) -> Tile {
        Tile {
            url: url.to_string(),
            x: 50.0,
            y: 50.0
        }
    }
}
